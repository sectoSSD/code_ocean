import copy

def add (tuple_1, tuple_2, laps='',sector='') :
    if laps : return tuple_1[0] + tuple_2[0], tuple_1[1] + tuple_2[1], laps
    elif sector : return tuple_1[0] + tuple_2[0], tuple_1[1] + tuple_2[1], laps, sector
    else : return tuple_1[0] + tuple_2[0], tuple_1[1] + tuple_2[1]

def current_path (xy, path) : return list(map(lambda xy_path : add(xy, xy_path), path))

def debug_1(controller, cursor, fork_map, tile, r = '') :
        """ position in debug line:
        1           tile                      -> tile from which dir_ starts to browse 
        2           cursor['idx']             -> index in dir_
        3           block/end_path            -> when blocking or end_path is true
        4           cursor['fork']            -> on wich cursor['fork']' we are
        5 fork_map['fork']/fork_map['max']    -> main information on the situation in fork_map
        '_' if nothing
        """
        show = (max([controller['blocking'], controller['end_path']]),
                controller['blocking'],
                controller['end_path']) 
        fork_map_situation = [str(fork) + '/' + str(max_)
                              for fork in list(fork_map['fork'].values())
                              for max_ in list(fork_map['max'].values()) ]
        r += str(tile) * show[0]
        r += (' ' + str(cursor['idx'])) * show[0]
        r += (' ' + ('block')) * show[1]
        r += (' ' + ('end_path')) * show[2]
        r += (' ' + str(cursor['fork'] if cursor['fork'] != '' else '_')) * show[0]
        r += (' ' + str(*fork_map_situation if fork_map_situation else '_'))* show[0]
        if r : print(r)
        else : pass

def off_side (xy, size) :
    off_side = False
    for i in xy :
        if size <= i or i < 0 : off_side = True
    return off_side

def initial_cursor(dir_map, fork_map, tile) :
    # 'dir' : current position in dir_map
    # 'idx' : current index in dir_map
    # 'fork' : least embranchement '' if no fork
    # 'tile' : current tile on map
    init_cursor = {'dir' : (), 'idx' : 0, 'fork' : '', 'tile' : tile }
    if fork_map['fork'].get(0) != None : init_cursor['dir'] = dir_map[0][fork_map['fork'][0]]
    else : init_cursor['dir'] = dir_map[0][0]
    return init_cursor

def update_cursor (cursor, dir_map, fork_map) :
    cursor['idx'] += 1
    if fork_map['fork'].get(cursor['idx']) != None :
        cursor['dir'] = dir_map[ cursor['idx'] ] [ fork_map['fork'][cursor] ]
    else : cursor['dir'] = dir_map[ cursor['idx'] ] [0]
    cursor['tile'] = add(cursor['dir'], cursor['tile'])
    return cursor

def sector (xy) :
    sector = {'1': [ 0, 5, 0, 5], '2' : [ 0, 5, 5,10], '3' : [ 0, 5,10,15],
              '4': [ 5,10, 0, 5], '5' : [ 5,10, 5,10], '6' : [ 5,10,10,15],
              '7': [10,15, 0, 5], '8' : [10,15, 5,10], '9' : [10,15,10,15]}
    for i in '123456789' : # 0 must be least
        if sector[i][0] <= xy[0] < sector[i][1] and sector[i][2] <= xy[1] < sector[i][3] : 
            return int(i)
            
def config_fork_map (dir_) :
    # how fork_map is built :
    fork_map = {'fork' : {}, 'max' : {}, 'fork-index': {}, 'index-fork' : {}}
    index = 0
    for fork in range(len(dir_)) :
        if len(dir_[fork]) != 1 :
            fork_map['fork'][fork] = 0
            fork_map['max'][fork] = len(dir_[fork])
            fork_map['fork-index'][fork] = index
            fork_map['index-fork'][index] = fork
            index += 1
    return fork_map

def del_fork_map (fork_map, fork) :
    index = fork_map['fork-index'][fork] 
    for cursor in ['fork', 'max', 'fork-index'] : del fork_map[cursor][fork]
    del fork_map['index-fork'][index]
    return fork_map

def update_fork_map(fork, fork_map): 
    fork_map['fork'][fork] += 1
    while fork_map['fork'][fork] > fork_map['max'][fork] :
        index = fork_map['fork-index'][fork]
        index -= 1 if index - 1 >= 0 else 0
        fork_map = del_fork_map(fork_map, fork)
        try :
            fork = fork_map['index-fork'][index]
            fork_map['fork'][fork] += 1    
        except KeyError : break
    return fork_map

def blocking(cursor, play_map, sector_map):
    # block when out of the game map or when on island
    blocking = False
    if (    cursor['tile'] in play_map['island']
         or sector_map.get(cursor['idx']) == sector(cursor['tile'])
         or off_side(cursor['tile'], play_map['size']) 
        ): blocking = True
    return blocking

###

def run_map(play_map, dir_map, sector_map, init_fork_map) : 
    possible_path = {}
    fork_map = copy.deepcopy(init_fork_map)
    for tile in play_map['brows'] :
        possible_path[tile] = run_path(tile, play_map, sector_map, dir_map, fork_map)
    print(f'fin {possible_path}')
    return possible_path

def run_path(tile, play_map, sector_map, dir_map, fork_map) :
   # define dir_ and sector when necessary
    cursor = initial_cursor(dir_map, fork_map, tile)
    controller = {'blocking' : False,  'end_path' : False}
    possible_path = 0 # possible path for this tile
    
    while True :
        
        "A : embranchement : oui / non , quel cursor "
        if fork_map['fork'].get(cursor['idx']) != None : 
            cursor['fork'] = cursor['idx']
        "B : obstacle : " 
        controller['blocking'] = blocking(cursor, play_map, sector_map)
        "C : bout de path : " 
        controller['end_path'] = True if cursor['idx'] == len(dir_map) - 1 else False

        debug_1(controller, cursor, fork_map, tile) # DEBUG MOD
        " On se bagarre avec les variable et le deboggeur : Regarder le deboggeur pour la suite"
        
        if fork_map['fork'].get(cursor['idx']) != None :
            fork_map = update_fork_map(cursor['fork'], fork_map)
            
        if cursor['fork'] :
            if controller['blocking'] == True or controller['end_path'] == True :
                cursor = initial_cursor(dir_map, fork_map, tile)
            if controller['blocking'] == True : pass
            if controller['end_path'] == True : possible_path += 1
        else :
            if controller['end_path'] == True : possible_path += 1
            if controller['blocking'] == True or controller['end_path'] == True :
                return possible_path
        
        cursor = update_cursor(cursor, dir_map, fork_map)
         
def main():

    size = 15
    island = []
    brows = [(x,y) for x in range(size) for y in range(size) if (x,y) not in island]
    play_map = {'island' : island, 'size' : size, 'brows' : brows}
    sector_map = {} # { cursor : sector }
    dir_map = [[(-1, 0), (1,0)], 
               [(0, 1, 0)], [(1, 0)], [(1, 0)], [(0, -1)], [(0, -1)], 
              [(-1, 0)], [(-1, 0)], [(-1, 0)], [(0, 1)], [(0, 1)], [(0, 1)],
              [(0, 1)],[(0, 1)],[(0, 1)],[(0, 1)]]
    init_fork_map = config_fork_map(dir_map) # map of embranchement
    print(f"play_map : {play_map['island']}")
    print(f'dir_map : {dir_map}')
    return run_map(play_map, dir_map, sector_map, init_fork_map)

if __name__ == '__main__' : main()
