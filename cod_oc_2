
# debug

def show_map(content, play_map) :
    # give graphics overview of the value of each tiles, content is a dic with tuple (x,y) as key
    for x in range(play_map['size']):
        line = []
        for y in range(play_map['size']):
            try : line.append(f'{content[x,y]:02}')
            except KeyError : line.append('XX')
        print(*line, sep=' ')   

def debug_run_path(controller, cursor, fork_map, tile, cmd = '', r = '') :
        """ position in debug line:
        1           tile                      -> tile from which dir_ starts to browse 
        2           cursor['idx']             -> index in dir_
        3           block/end_path            -> when blocking or end_path is true
        4 fork_map['fork']/fork_map['max']    -> main information on the situation in fork_map
        '_' if nothing
        OPTION : if cmd = 'cursor','fork_map', 'controller' print one or several contain
        """
        show = (max([controller['blocking'], controller['end_path']]),
                controller['blocking'],
                controller['end_path']) 
        fork_map_situation = [str(fork) + '/' + str(max_)
                              for fork in list(fork_map['fork'].values())
                              for max_ in list(fork_map['max'].values()) ]
        space = ' ' * 25 if tile[1] % 2 != 0 else '' # just to see more tile changing
        r += (space + str(tile)) * show[0]
        r += (' ' + str(cursor['idx'])) * show[0]
        r += (' ' + ('block')) * show[1]
        r += (' ' + ('end_path')) * show[2]
        r += (' ' + str(*fork_map_situation if fork_map_situation else '_'))* show[0]
        r += (' ' + str(controller['stop'])) * show[0]
        if  'fork_map' in cmd : r += (' ' + str(fork_map)) * show[0]
        if 'cursor' in cmd : r += (' ' + str(cursor)) * show[0]
        if 'controller' in cmd : r += (' ' + str(controller))* show[0]
        if r : print(r)
        else : pass

# tools

from random import choice
from time import perf_counter
import copy

def add_tuple (tuple_1, tuple_2) :
    return tuple_1[0] + tuple_2[0], tuple_1[1] + tuple_2[1]

# play_map

def config_play_map() :
    width, height, my_id = [int(i) for i in input().split()]
    size = width if width == height else 'problem'
    island, brows = [], []
    for y in range(size):
        line = input()
        for x in range(size) :
            if line[x] == 'x' : island.append((x,y))
            else : brows.append((x,y))
    return {'island' : island, 'size' : size, 'brows' : brows}

# run path : map


def off_side_path(path, size, command = 'done') :

    if command == 'done' : n_s, e_w = path['max']
    else :
        n_s = abs( sum([xy[0][0] for xy in path]) )
        e_w = abs( sum([xy[0][1] for xy in path]) )
    return (n_s > size or e_w > size)

def off_side_tile(max, size) :
    n_s, e_w = max
    return (n_s > size or e_w > size)

def sector (xy) :
    sector = {'1': [ 0, 5, 0, 5], '2' : [ 0, 5, 5,10], '3' : [ 0, 5,10,15],
              '4': [ 5,10, 0, 5], '5' : [ 5,10, 5,10], '6' : [ 5,10,10,15],
              '7': [10,15, 0, 5], '8' : [10,15, 5,10], '9' : [10,15,10,15]}
    for i in '123456789' :
        if sector[i][0] <= xy[0] < sector[i][1] and sector[i][2] <= xy[1] < sector[i][3] : 
            return int(i)

def dir_converter(key) :
    # NB : can't put list of tuple as key
    dir_dic = { (-1, 0) : 'N', 'N' : [(-1, 0)],
                ( 1, 0) : 'S', 'S' : [( 1, 0)],
                ( 0,-1) : 'E', 'E' : [( 0,-1)],
                ( 0, 1) : 'W', 'W' : [( 0, 1)],
                'silence' : list(set([(x,0) for x in range(-4,5)] + [(0,y) for y in range(-4,5)])) }
    return dir_dic[key]

# start_tile

def random_path(lenght,size) :
    direction = [ [(1,0)], [(-1,0)], [(0,1)], [(0,-1)] ]
    while True :
        current_direction_path = []
        current_tile = (size,size)
        current_tile_path = [current_tile]
        counter = 0
        while True :
            current_direction = choice(direction)
            temp_tile = add_tuple(current_tile,current_direction[0])
            if ( temp_tile not in current_tile_path 
                 and off_side_path(current_direction_path, size, command = 'do yourslef') == False ):
                current_tile = temp_tile
                current_tile_path.append(current_tile)
                current_direction_path.append(current_direction)
                if len(current_direction_path) == lenght : 
                    return config_dir_map(current_direction_path)
                counter = 0
            else :
                temp_tile = current_tile
                counter += 1
                if counter <= 6 : continue
                else : break

# game_loop : orders

def torpedo_area(center, play_map) :
    ref_position = center
    current_position = ref_position
    direction = [ [(1,0)], [(-1,0)], [(0,1)], [(0,-1)] ]
    torpedo_area = []
    torpedo_range = 4
    range_, try_, max_try = 0, 0, torpedo_range**6
    while True :
        try_ += 1
        range_ += 1
        current_direction = choice(direction)
        current_position = add_tuple(current_position,current_direction[0])
        if blocking(current_position, play_map) :
            current_position = ref_position
            range_ = 0
            continue
        if current_position not in torpedo_area and current_position != ref_position :
            torpedo_area.append(current_position)
            current_position = ref_position
            try_ = 0
            range_ = 0
        if range_ == torpedo_range : 
            current_position = ref_position
            range_ = 0
        if try_ == max_try or len(torpedo_area) == 40 : return torpedo_area

def manage_order(index, order, dir_map, play_map, sonar_result) :
    message_order = [cursor.split() for cursor in order.split('|')]
    for order_cursor in message_order :
        if order_cursor[0] == 'MOVE' : dir_map['dir'].append( dir_converter(order_cursor[1]) )
        elif order_cursor[0] == 'SILENCE' : dir_map['dir'].append(dir_converter('silence'))
        elif (order_cursor[0] == 'SURFACE' or order_cursor[0] == 'SONAR'
           ) : dir_map['sector']['in'][index] = order_cursor[1]
        elif order_cursor[0] == 'TORPEDO' :
            shoot_tile = order_cursor[1], order_cursor[2]
            dir_map['sector']['tiles'][index] = torpedo_area(shoot_tile, play_map)
        if 'NA' not in sonar_result : 
            if   sonar_result[1] == 'Y' : dir_map['sector']['in'][index - 1] = sonar_result[0]
            elif sonar_result[1] == 'N' : dir_map['sector']['out'][index - 1] = sonar_result[0]
    return config_dir_map(dir_map['dir'], dir_map['sector'])

# run path : cursor

def initial_cursor(dir_map, fork_map, tile) :
    # 'dir' : current position in dir_map
    # 'idx' : current index in dir_map
    # 'fork' : least embranchement '' if no fork
    # 'tile' : current tile on map
    init_cursor = {'dir' : (), 'idx' : 0, 'tile' : tile }
    
    init_cursor['dir'] = ( dir_map['dir'][0][fork_map['fork'][0]-1] 
                          if fork_map['fork'].get(0) != None
                          else dir_map['dir'][0][0])
    return init_cursor

def update_cursor (cursor, dir_map, fork_map) :
    cursor['idx'] += 1
    branch_index = ( fork_map['fork'][cursor['idx']] 
                    
                            if fork_map['fork'].get(cursor['idx']) != None
                            else 0 )
    
    cursor['dir'] = dir_map['dir'][ cursor['idx'] ] [branch_index]
    cursor['tile'] = add_tuple(cursor['dir'], cursor['tile'])
    return cursor

# run_path : dir_map

def config_dir_map(dir_, sector = {'in' : {}, 'out' : {}, 'tiles' : {}} ) :
    dir_map = {'dir' : dir_ , 
               'max' :  ( abs( sum([xy[0][0] for xy in dir_ if len(xy) == 1]) ),
                          abs( sum([xy[0][1] for xy in dir_ if len(xy) == 1]) )), 
               'length' : len(dir_),
               'fork'   : [idx for idx in range(len(dir_)) if len(dir_[idx]) != 1],
               'sector' : sector
                }
    return dir_map

# run_path : fork_map
            
def config_fork_map (dir_map) :
    # how fork_map is built :
    fork_map = {'fork' : {}, 'max' : {}, 'fork-index': {}, 'index-fork' : {}}
    index = 0
    for fork in dir_map['fork'] :
        fork_map['fork'][fork] = 0
        fork_map['max'][fork] = len(dir_map['dir'][fork])
        fork_map['fork-index'][fork] = index
        fork_map['index-fork'][index] = fork
        index += 1
    return fork_map

def del_fork_map (fork_map, fork) :
    index = fork_map['fork-index'][fork] 
    for cursor in ['fork', 'max', 'fork-index'] : del fork_map[cursor][fork]
    del fork_map['index-fork'][index]
    return fork_map

def update_fork_map(fork, fork_map): 
    fork_map['fork'][fork] += 1
    while fork_map['fork'][fork] > fork_map['max'][fork] :
        index = fork_map['fork-index'][fork]
        index -= 1 if index - 1 >= 0 else 0
        fork_map = del_fork_map(fork_map, fork)
        try :
            fork = fork_map['index-fork'][index]
            fork_map['fork'][fork] += 1    
        except KeyError : break
    return fork_map

# run_path : controller

def blocking(tile, play_map, sector = {}, index = None) : # revoir : sector_map
    blocking = (    True 
                    if tile in play_map['island'] 
                    or off_side_tile(tile, play_map['size']) 
                    or ( sector['in'].get(index) != None 
                            and sector['in'].get(index) != sector(tile) )
                    or ( sector['out'].get(index) != None
                         and tile not in sector['out'].get(index) )
                    else False
                )
    return blocking

def stop(fork_map) :
    if len(fork_map['fork'].keys()) != len(fork_map['max'].keys()) : 
        raise ValueError('fork_map')
    if (len(fork_map['fork'].keys()) == 1 and 
        list(fork_map['fork'].values()) == list(fork_map['max'].values())) :
        return True
    else : return False

# main engine

def run_map(play_map, dir_map, init_fork_map ={'fork':{}}, command ='gameloop') :
    # integrer dans un run map un filtre ('max_NS','max_EW')
    possible_path = {}
    for tile in play_map['brows'] :
        if off_side_path(dir_map, play_map['size']) : continue
        fork_map = copy.deepcopy(init_fork_map)
        possible_path[tile] = run_path(tile, play_map, dir_map, fork_map)     
    # if command == 'gameloop' : show_map(possible_path, play_map)
    return possible_path

def run_path(tile, play_map, dir_map, fork_map) :
    cursor = initial_cursor(dir_map, fork_map, tile)
    controller = {'blocking' : False,  'end_path' : False, 'stop' : True}
    possible_path = 0 # possible path for this tile
    
    while True :
        
        "A : embranchement : "
        if fork_map['fork'].get(cursor['idx']) != None :
            fork_map = update_fork_map(cursor['idx'], fork_map)
            controller['stop'] = stop(fork_map)
        "B : obstacle : " 
        controller['blocking'] = blocking(cursor['tile'], play_map, dir_map['sector'], cursor['idx'])
        "C : bout de path : " 
        controller['end_path'] = True if cursor['idx'] == dir_map['length'] - 1 else False

        # debug_run_path(controller, cursor, fork_map, tile) # DEBUG MOD
            
        if controller['end_path'] == True and controller['blocking'] == False : possible_path += 1
        
        if controller['stop'] == False :
            if controller['blocking'] == True or controller['end_path'] == True :
                cursor = initial_cursor(dir_map, fork_map, tile)
                continue
        else :
            if controller['blocking'] == True or controller['end_path'] == True :
                return possible_path
        
        cursor = update_cursor(cursor, dir_map, fork_map)

# game
def start(play_map, start_laps) :
    nb_tile = [25,16,9,4,1]
    idx = 0
    try_ = 0
    while True :
        random_dir_map = random_path(start_laps,play_map['size'])
        possible_path = run_map( play_map,
                                 random_dir_map,
                                 command = 'start tile')
        if sum(possible_path.values()) > nb_tile[idx] :
            return ( choice( [key for key in possible_path if possible_path[key] != 0] ),
                     random_dir_map )
        else : 
            try_ += 1
            if try_ % (play_map['size']**2) == 0 : idx += 1

def game_loop(my_dir_map, his_dir_map, play_map) :
    lap = 0
    sonar_result = 'NA'
    while True :

        x, y, my_life, opp_life, torpedo_cooldown, sonar_cooldown, silence_cooldown, mine_cooldown = [int(i) for i in input().split()]
        my_position = (x,y)
        sonar_result = sonar_result, input()

        his_dir_map = manage_order(lap, input(), his_dir_map, play_map, sonar_result)

        direction = dir_converter( my_dir_map['dir'][lap][0] )

        sonar_result = 0 if sonar_result else 'NA' # put here sector if make sonar research
        print(f'MOVE {direction} SILENCE')
        lap += 1

def main():
    start_laps = 16 # == lenght_path
    play_map = config_play_map()
    start_tile, my_dir_map = start(play_map, start_laps)
    his_dir_map = config_dir_map([])
    print(*start_tile)
    game_loop(my_dir_map, his_dir_map, play_map)  

if __name__ == '__main__' : main()
